using System;

class Graph
{
    public class Edge
    {
        public int src, dest;
        public int weight;
        public Edge()
        {
            src = dest = weight = 0;
        }
    };
    public Edge[] edge;
    public Graph(int v, int e)
    {
        V = v;
        E = e;
        edge = new Edge[e];
        for (int i = 0; i < e; ++i)
            edge[i] = new Edge();
    }

    int V, E;


    public void BellmanFord(Graph graph, char srcIndex)
    {
        int src = (srcIndex - 65);
        int V = graph.V, E = graph.E;
        int[] dist = new int[V], destVertices = new int[V];
        for (int i = 0; i < V; ++i)
            dist[i] = int.MaxValue;
        //Console.WriteLine(src + "\n");
        dist[0] = 0;

        // Calculating the MST
        for (int i = 1; i < V; ++i)
        {
            for (int j = 0; j < E; ++j)
            {
                int u = graph.edge[j].src, v = graph.edge[j].dest, weight = graph.edge[j].weight;
                if (dist[u] != int.MaxValue && dist[u] + weight < dist[v])
                {
                    destVertices[i] = v;
                    dist[v] = dist[u] + weight;
                }
            }
        }

        // Check for a negative-weight/cycle from the generated MST
        for (int j = 0; j < E; ++j)
        {
            int u = graph.edge[j].src, v = graph.edge[j].dest, weight = graph.edge[j].weight;
            if (dist[u] != int.MaxValue && dist[u] + weight < dist[v])
            {
                Console.WriteLine("Graph contains negative weight cycle");
                return;
            }
        }
        Console.WriteLine("Vertex Distance from Source");
        if (dist[src] != int.MaxValue)
            Console.WriteLine((char)(src + 65) + "\t\t" + (char)(destVertices[src] + 65) + "\t\t" + dist[src]);
            //Console.WriteLine((char)(src + 65) + "\t\t" + (char)(graph.edge[src].src + 65) + "\t\t" + dist[src]);
    }


}
